[tool.poetry]
name = "product-data"
version = "0.1.0"
description = ""
authors = ["Misha Mishin <mikhail.mishin@oda.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.26.0"
jsonschema = "^4.0.0"
duckdb = "^1.1.0"
pandas = "^2.2.0"
dbt-core = "^1.8.0"
dbt-duckdb = "^1.9.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
product-data = "product_data.main:main"
ingest-data = "product_data.main:ingest_data"
fetch-data = "product_data.main:fetch_data"

# Config for your linting tools ruff and isort
[tool.ruff]
line-length = 120

# Assume Python 3.10.
target-version = "py311"

# We leave the defaults in `exclude` by not specifying it, and specify extend-exclude instead
extend-exclude = [
    "OKRS",
    "ad-hoc",
]

[tool.ruff.lint]
select = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "E",   # PyCodeStyle Error
  "ERA", # eradicate
  "F",   # PyFlakes
  "I",   # isort
  "PD",  # pandas-vet
  "TID", # tidy-imports
  "N",   # pep8-naming
  "W",   # PyCodeStyle Warning
  "UP",  # pyugrade
]

ignore = [
  "A003",  # Class attribute {name} is shadowing a Python builtin
  "B904",  # Within an except clause, raise exceptions with raise
  "B905",  # `zip()` without an explicit `strict=` parameter
  "B018",  # Useless expression. Complains about Hera workflows with only one step
  "B028",  # No explicit `stacklevel` keyword argument found
  "C416",  # Unnecessary <dict/list/set> comprehension. Rewrite using <dict/list/set>().
  "C419",  # Unnecessary list comprehension in <any/all>() - rewrite as a generator.
  "D100",  # Missing docstring in public module
  "D101",  # Missing docstring in public class
  "D102",  # Missing docstring in public method
  "D103",  # Missing docstring in public function
  "D104",  # Missing docstring in public package
  "D202",  # No blank lines allowed after function docstring
  "D212",  # Multi-line docstring summary should start at the first line
  "D411",  # Missing blank line before section
  "E402",  # Module level import not at top of file
  "N803",  # Argument name {name} should be lowercase
  "N805",  # First argument of a method should be named 'self' TODO: Enable
  "N806",  # Variable in function should be lowercase
  "N818",  # Exception name {name} should be named with an Error suffix
  "PD011", # Use '.array' or '.to_array()' instead of '.values'; 'values' is ambiguous (trigged by using .values on dicts)
  "PD013", # '.melt' is preferred to '.stack'; provides same functionality
  "PD015", # Use `.merge` method instead of `pd.merge` function. They have equivalent functionality.
  "PD901", # 'df' is a bad variable name.
  "UP006", # Use `list` instead of `List` for type annotation
  "UP007", # Use `X | Y` for type annotations TODO: Enable
  "UP035", # `typing.Dict` is deprecated, use `dict` instead
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
  "ERA001", # Found commented-out code
]

[tool.ruff.lint.isort]
lines-after-imports = 2

# Allows having a settings file in the project root
known-first-party = ['settings']

# Sets the ordering for imports
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'local-folder',
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator"]
